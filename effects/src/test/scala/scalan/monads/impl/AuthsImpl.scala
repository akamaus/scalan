package scalan.monads

import scala.reflect.runtime.universe._
import scalan._
import scalan.monads._
import scala.reflect.runtime.universe.{WeakTypeTag, weakTypeTag}
import scalan.meta.ScalanAst._

package impl {
// Abs -----------------------------------
trait AuthenticationsAbs extends scalan.ScalanDsl with Authentications {
  self: AuthenticationsDsl =>

  // single proxy for each type family
  implicit def proxyAuth[A](p: Rep[Auth[A]]): Auth[A] = {
    proxyOps[Auth[A]](p)(scala.reflect.classTag[Auth[A]])
  }

  // familyElem
  class AuthElem[A, To <: Auth[A]](implicit _eA: Elem[A])
    extends EntityElem[To] {
    def eA = _eA
    lazy val parent: Option[Elem[_]] = None
    lazy val typeArgs = TypeArgs("A" -> eA)
    override def isEntityType = true
    override lazy val tag = {
      implicit val tagA = eA.tag
      weakTypeTag[Auth[A]].asInstanceOf[WeakTypeTag[To]]
    }
    override def convert(x: Rep[Def[_]]) = {
      implicit val eTo: Elem[To] = this
      val conv = fun {x: Rep[Auth[A]] => convertAuth(x) }
      tryConvert(element[Auth[A]], this, x, conv)
    }

    def convertAuth(x: Rep[Auth[A]]): Rep[To] = {
      x.selfType1 match {
        case _: AuthElem[_, _] => x.asRep[To]
        case e => !!!(s"Expected $x to have AuthElem[_, _], but got $e", x)
      }
    }

    override def getDefaultRep: Rep[To] = ???
  }

  implicit def authElement[A](implicit eA: Elem[A]): Elem[Auth[A]] =
    cachedElem[AuthElem[A, Auth[A]]](eA)

  implicit case object AuthCompanionElem extends CompanionElem[AuthCompanionAbs] {
    lazy val tag = weakTypeTag[AuthCompanionAbs]
    protected def getDefaultRep = Auth
  }

  abstract class AuthCompanionAbs extends CompanionDef[AuthCompanionAbs] with AuthCompanion {
    def selfType = AuthCompanionElem
    override def toString = "Auth"
  }
  def Auth: Rep[AuthCompanionAbs]
  implicit def proxyAuthCompanionAbs(p: Rep[AuthCompanionAbs]): AuthCompanionAbs =
    proxyOps[AuthCompanionAbs](p)

  abstract class AbsLogin
      (user: Rep[String], password: Rep[String])
    extends Login(user, password) with Def[Login] {
    lazy val selfType = element[Login]
  }
  // elem for concrete class
  class LoginElem(val iso: Iso[LoginData, Login])
    extends AuthElem[SOption[String], Login]
    with ConcreteElem[LoginData, Login] {
    override lazy val parent: Option[Elem[_]] = Some(authElement(sOptionElement(StringElement)))
    override lazy val typeArgs = TypeArgs()

    override def convertAuth(x: Rep[Auth[SOption[String]]]) = // Converter is not generated by meta
!!!("Cannot convert from Auth to Login: missing fields List(user, password)")
    override def getDefaultRep = Login("", "")
    override lazy val tag = {
      weakTypeTag[Login]
    }
  }

  // state representation type
  type LoginData = (String, String)

  // 3) Iso for concrete class
  class LoginIso
    extends EntityIso[LoginData, Login] with Def[LoginIso] {
    override def from(p: Rep[Login]) =
      (p.user, p.password)
    override def to(p: Rep[(String, String)]) = {
      val Pair(user, password) = p
      Login(user, password)
    }
    lazy val eFrom = pairElement(element[String], element[String])
    lazy val eTo = new LoginElem(self)
    lazy val selfType = new LoginIsoElem
    def productArity = 0
    def productElement(n: Int) = ???
  }
  case class LoginIsoElem() extends Elem[LoginIso] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new LoginIso())
    lazy val tag = {
      weakTypeTag[LoginIso]
    }
    lazy val typeArgs = TypeArgs()
  }
  // 4) constructor and deconstructor
  class LoginCompanionAbs extends CompanionDef[LoginCompanionAbs] with LoginCompanion {
    def selfType = LoginCompanionElem
    override def toString = "Login"
    @scalan.OverloadId("fromData")
    def apply(p: Rep[LoginData]): Rep[Login] =
      isoLogin.to(p)
    @scalan.OverloadId("fromFields")
    def apply(user: Rep[String], password: Rep[String]): Rep[Login] =
      mkLogin(user, password)

    def unapply(p: Rep[Auth[SOption[String]]]) = unmkLogin(p)
  }
  lazy val LoginRep: Rep[LoginCompanionAbs] = new LoginCompanionAbs
  lazy val Login: LoginCompanionAbs = proxyLoginCompanion(LoginRep)
  implicit def proxyLoginCompanion(p: Rep[LoginCompanionAbs]): LoginCompanionAbs = {
    proxyOps[LoginCompanionAbs](p)
  }

  implicit case object LoginCompanionElem extends CompanionElem[LoginCompanionAbs] {
    lazy val tag = weakTypeTag[LoginCompanionAbs]
    protected def getDefaultRep = Login
  }

  implicit def proxyLogin(p: Rep[Login]): Login =
    proxyOps[Login](p)

  implicit class ExtendedLogin(p: Rep[Login]) {
    def toData: Rep[LoginData] = isoLogin.from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoLogin: Iso[LoginData, Login] =
    reifyObject(new LoginIso())

  // 6) smart constructor and deconstructor
  def mkLogin(user: Rep[String], password: Rep[String]): Rep[Login]
  def unmkLogin(p: Rep[Auth[SOption[String]]]): Option[(Rep[String], Rep[String])]

  abstract class AbsHasPermission
      (user: Rep[String], password: Rep[String])
    extends HasPermission(user, password) with Def[HasPermission] {
    lazy val selfType = element[HasPermission]
  }
  // elem for concrete class
  class HasPermissionElem(val iso: Iso[HasPermissionData, HasPermission])
    extends AuthElem[Boolean, HasPermission]
    with ConcreteElem[HasPermissionData, HasPermission] {
    override lazy val parent: Option[Elem[_]] = Some(authElement(BooleanElement))
    override lazy val typeArgs = TypeArgs()

    override def convertAuth(x: Rep[Auth[Boolean]]) = // Converter is not generated by meta
!!!("Cannot convert from Auth to HasPermission: missing fields List(user, password)")
    override def getDefaultRep = HasPermission("", "")
    override lazy val tag = {
      weakTypeTag[HasPermission]
    }
  }

  // state representation type
  type HasPermissionData = (String, String)

  // 3) Iso for concrete class
  class HasPermissionIso
    extends EntityIso[HasPermissionData, HasPermission] with Def[HasPermissionIso] {
    override def from(p: Rep[HasPermission]) =
      (p.user, p.password)
    override def to(p: Rep[(String, String)]) = {
      val Pair(user, password) = p
      HasPermission(user, password)
    }
    lazy val eFrom = pairElement(element[String], element[String])
    lazy val eTo = new HasPermissionElem(self)
    lazy val selfType = new HasPermissionIsoElem
    def productArity = 0
    def productElement(n: Int) = ???
  }
  case class HasPermissionIsoElem() extends Elem[HasPermissionIso] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new HasPermissionIso())
    lazy val tag = {
      weakTypeTag[HasPermissionIso]
    }
    lazy val typeArgs = TypeArgs()
  }
  // 4) constructor and deconstructor
  class HasPermissionCompanionAbs extends CompanionDef[HasPermissionCompanionAbs] with HasPermissionCompanion {
    def selfType = HasPermissionCompanionElem
    override def toString = "HasPermission"
    @scalan.OverloadId("fromData")
    def apply(p: Rep[HasPermissionData]): Rep[HasPermission] =
      isoHasPermission.to(p)
    @scalan.OverloadId("fromFields")
    def apply(user: Rep[String], password: Rep[String]): Rep[HasPermission] =
      mkHasPermission(user, password)

    def unapply(p: Rep[Auth[Boolean]]) = unmkHasPermission(p)
  }
  lazy val HasPermissionRep: Rep[HasPermissionCompanionAbs] = new HasPermissionCompanionAbs
  lazy val HasPermission: HasPermissionCompanionAbs = proxyHasPermissionCompanion(HasPermissionRep)
  implicit def proxyHasPermissionCompanion(p: Rep[HasPermissionCompanionAbs]): HasPermissionCompanionAbs = {
    proxyOps[HasPermissionCompanionAbs](p)
  }

  implicit case object HasPermissionCompanionElem extends CompanionElem[HasPermissionCompanionAbs] {
    lazy val tag = weakTypeTag[HasPermissionCompanionAbs]
    protected def getDefaultRep = HasPermission
  }

  implicit def proxyHasPermission(p: Rep[HasPermission]): HasPermission =
    proxyOps[HasPermission](p)

  implicit class ExtendedHasPermission(p: Rep[HasPermission]) {
    def toData: Rep[HasPermissionData] = isoHasPermission.from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoHasPermission: Iso[HasPermissionData, HasPermission] =
    reifyObject(new HasPermissionIso())

  // 6) smart constructor and deconstructor
  def mkHasPermission(user: Rep[String], password: Rep[String]): Rep[HasPermission]
  def unmkHasPermission(p: Rep[Auth[Boolean]]): Option[(Rep[String], Rep[String])]

  registerModule(Authentications_Module)
}

// Std -----------------------------------
trait AuthenticationsStd extends scalan.ScalanDslStd with AuthenticationsDsl {
  self: AuthenticationsDslStd =>

  lazy val Auth: Rep[AuthCompanionAbs] = new AuthCompanionAbs {
  }

  case class StdLogin
      (override val user: Rep[String], override val password: Rep[String])
    extends AbsLogin(user, password) {
  }

  def mkLogin
    (user: Rep[String], password: Rep[String]): Rep[Login] =
    new StdLogin(user, password)
  def unmkLogin(p: Rep[Auth[SOption[String]]]) = p match {
    case p: Login @unchecked =>
      Some((p.user, p.password))
    case _ => None
  }

  case class StdHasPermission
      (override val user: Rep[String], override val password: Rep[String])
    extends AbsHasPermission(user, password) {
  }

  def mkHasPermission
    (user: Rep[String], password: Rep[String]): Rep[HasPermission] =
    new StdHasPermission(user, password)
  def unmkHasPermission(p: Rep[Auth[Boolean]]) = p match {
    case p: HasPermission @unchecked =>
      Some((p.user, p.password))
    case _ => None
  }
}

// Exp -----------------------------------
trait AuthenticationsExp extends scalan.ScalanDslExp with AuthenticationsDsl {
  self: AuthenticationsDslExp =>

  lazy val Auth: Rep[AuthCompanionAbs] = new AuthCompanionAbs {
  }

  case class ExpLogin
      (override val user: Rep[String], override val password: Rep[String])
    extends AbsLogin(user, password)

  object LoginMethods {
    object toOper {
      def unapply(d: Def[_]): Option[Rep[Login]] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[LoginElem] && method.getName == "toOper" =>
          Some(receiver).asInstanceOf[Option[Rep[Login]]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[Login]] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  object LoginCompanionMethods {
  }

  def mkLogin
    (user: Rep[String], password: Rep[String]): Rep[Login] =
    new ExpLogin(user, password)
  def unmkLogin(p: Rep[Auth[SOption[String]]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: LoginElem @unchecked =>
      Some((p.asRep[Login].user, p.asRep[Login].password))
    case _ =>
      None
  }

  case class ExpHasPermission
      (override val user: Rep[String], override val password: Rep[String])
    extends AbsHasPermission(user, password)

  object HasPermissionMethods {
    object eA {
      def unapply(d: Def[_]): Option[Rep[HasPermission]] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[HasPermissionElem] && method.getName == "eA" =>
          Some(receiver).asInstanceOf[Option[Rep[HasPermission]]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[HasPermission]] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }

    object toOper {
      def unapply(d: Def[_]): Option[Rep[HasPermission]] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[HasPermissionElem] && method.getName == "toOper" =>
          Some(receiver).asInstanceOf[Option[Rep[HasPermission]]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[HasPermission]] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  object HasPermissionCompanionMethods {
  }

  def mkHasPermission
    (user: Rep[String], password: Rep[String]): Rep[HasPermission] =
    new ExpHasPermission(user, password)
  def unmkHasPermission(p: Rep[Auth[Boolean]]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: HasPermissionElem @unchecked =>
      Some((p.asRep[HasPermission].user, p.asRep[HasPermission].password))
    case _ =>
      None
  }

  object AuthMethods {
    object toOper {
      def unapply(d: Def[_]): Option[Rep[Auth[A]] forSome {type A}] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[AuthElem[_, _]] && method.getName == "toOper" =>
          Some(receiver).asInstanceOf[Option[Rep[Auth[A]] forSome {type A}]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[Auth[A]] forSome {type A}] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  object AuthCompanionMethods {
  }
}

object Authentications_Module extends scalan.ModuleInfo {
  val dump = "H4sIAAAAAAAAAL1WTWwbRRQe23Fsx0kbgmgAqWpqXEAo2BUVKlKEkJu4lMpJrG5LkVsFjXfHzpbdmWFnHNYcyq0ScEMIJCQORSAuFQhxA4kLIFUV4sCVM6cCqnqgEhKIN7M//mnWDQfwYbQ7++Z9733ve89z7TeUFR56VJjYwbTiEokrhn6uCVk26lTasr/OrJ5D1khn69RHf15w31xMo/kWmt7GYk04LVQIHuo+j58NaTVQAVOTCMk8IdHhhkaomsxxiCltRqu26/Ykbjuk2rCFXGmgqTaz+q+iyyjVQPMmo6ZHJDFWHSwEEeF+nqiI7Pi9oN/7m3yAQasqi+pQFmc9bEsIHzDmA/szhBt9ymjflWhfGNomV2GBTZH4HHJ4weWOhsk0UM52OfNkhJoDhG1mRa9TFMMGWmhcwju4CqjdqiE9m3aVM47NV3CXbICJMp+CHARxOmf7nITOi0JaI3g+RwhBVZ7SgVUGnFViziqKs7JBPBs79utYfWx6zO+j4JfKIORzcLF8DxeRB1KnVvmti+aFO0bRTavDvgolpwOaBkeHEhSiywPcXj/zjrj9/NXjaTTTQjO2qLWF9LAph2UQ0lXElDKpY44ZxF4XKlhKqqBGqYHNmEwKJnM5puAp5HIWCuXYpi2VsdqbDcuTwH1OchKZpnyeivNdSshXa2kVO07z5kNPHvm1/lIapUchCuDSgGbwIqcSTdV6cjt0rdb9EuWMQG8x4CNJgJw0PdsF0e+Qp7/9+tytbzayGnPBIh3cc+SL2OmRQG9hBINoFHi6VJJoemBQ8MfX3IR8Y+Yfu/m79f1RdDEd1ytMb28SARcLz3zw1RHS/CyN8i3dUScd3NViUQVZI8JsoTzbIV6wn9vBjnraVTC5MPmwjMP8Z4B/iZYShwEnqjgruslSUfrFoE82GCXlk83yH8aNd6+pNvDQbPAlqNbf9vG/ft7XkbpDoK49QbyoohkYKgEXalkM6NUbB2MktUA18hwYeY151sSzowWaCeIwmEvuK922t66+LXUpUv7o5NlsX4JOX9HnDk+oSjQUv7hy5YFbH798v27cfNuWLublo/+ibaMu+w/bEsXkBQPp4cG7ZpSrKc66Nl0dxi2NH5Aoq63GPhZTo6053q0H4FwHOwJUlTvBmEMwvbtAGmXo0F01//+0otZlvVb3QNyBU1g0iefaQgBv9yJwbsR6YDSUwXQIPUpqBqQ2mWbYStWGnCVwPJbR3hOdU3i75BfNZ70TD7ODyeMYhEkXjfX3Pz+0lUbZ0yAOmFKigbJt1qNWpHi4wEjiyxPRXmpU8aBw7GE3Vrj+LaFBWIlsNAeBLkOglYRA14jpYI9Y6lpBXLj2BJ177L3nzp9+8Pw5PTtmLW0UfIln5u6XtHXMV/SV4vEJVwowKtddDldGeDj23bM/vfHDp5/oYTmoh0T7Fd3qImZGyHNREoxiS8S5lRJyM8JpAZq6fOfDjSd+/PIX/Zc4o+YOjHAa39SG/wpHtbYwFgTcwIboBk2okTQkMe3F/gfvKz1yMAsAAA=="
}
}

