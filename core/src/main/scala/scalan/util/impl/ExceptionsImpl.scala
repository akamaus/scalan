package scalan.util

import scalan._
import scalan.common.Default
import scala.reflect.runtime.universe.{WeakTypeTag, weakTypeTag}
import scalan.meta.ScalanAst._

package impl {
// Abs -----------------------------------
trait ExceptionsAbs extends scalan.Scalan with Exceptions {
  self: ExceptionsDsl =>

  // single proxy for each type family
  implicit def proxySThrowable(p: Rep[SThrowable]): SThrowable = {
    proxyOps[SThrowable](p)(scala.reflect.classTag[SThrowable])
  }

  // TypeWrapper proxy
  //implicit def proxyThrowable(p: Rep[Throwable]): SThrowable =
  //  proxyOps[SThrowable](p.asRep[SThrowable])

  implicit def unwrapValueOfSThrowable(w: Rep[SThrowable]): Rep[Throwable] = w.wrappedValue

  implicit lazy val throwableElement: Elem[Throwable] =
    element[SThrowable].asInstanceOf[WrapperElem[_, _]].baseElem.asInstanceOf[Elem[Throwable]]

  // familyElem
  class SThrowableElem[To <: SThrowable]
    extends WrapperElem[Throwable, To] {
    lazy val parent: Option[Elem[_]] = None
    lazy val tyArgSubst: Map[String, TypeDesc] = {
      Map()
    }
    override def isEntityType = true
    override lazy val tag = {
      weakTypeTag[SThrowable].asInstanceOf[WeakTypeTag[To]]
    }
    override def convert(x: Rep[Def[_]]) = {
      implicit val eTo: Elem[To] = this
      val conv = fun {x: Rep[SThrowable] => convertSThrowable(x) }
      tryConvert(element[SThrowable], this, x, conv)
    }

    def convertSThrowable(x: Rep[SThrowable]): Rep[To] = {
      x.selfType1 match {
        case _: SThrowableElem[_] => x.asRep[To]
        case e => !!!(s"Expected $x to have SThrowableElem[_], but got $e", x)
      }
    }
    lazy val baseElem = {
      new BaseTypeElem[Throwable, SThrowable](this.asInstanceOf[Elem[SThrowable]])(weakTypeTag[Throwable], DefaultOfThrowable)
    }
    lazy val eTo: Elem[_] = new SThrowableImplElem(isoSThrowableImpl)
    override def getDefaultRep: Rep[To] = ???
  }

  implicit def sThrowableElement: Elem[SThrowable] =
    elemCache.getOrElseUpdate(
      (classOf[SThrowableElem[SThrowable]], Nil),
      new SThrowableElem[SThrowable]).asInstanceOf[Elem[SThrowable]]

  implicit case object SThrowableCompanionElem extends CompanionElem[SThrowableCompanionAbs] {
    lazy val tag = weakTypeTag[SThrowableCompanionAbs]
    protected def getDefaultRep = SThrowable
  }

  abstract class SThrowableCompanionAbs extends CompanionDef[SThrowableCompanionAbs] with SThrowableCompanion {
    def selfType = SThrowableCompanionElem
    override def toString = "SThrowable"
  }
  def SThrowable: Rep[SThrowableCompanionAbs]
  implicit def proxySThrowableCompanionAbs(p: Rep[SThrowableCompanionAbs]): SThrowableCompanionAbs =
    proxyOps[SThrowableCompanionAbs](p)

  // default wrapper implementation
  abstract class SThrowableImpl(val wrappedValue: Rep[Throwable]) extends SThrowable with Def[SThrowableImpl] {
    lazy val selfType = element[SThrowableImpl]

    def getMessage: Rep[String] =
      methodCallEx[String](self,
        this.getClass.getMethod("getMessage"),
        List())

    def initCause(cause: Rep[SThrowable]): Rep[SThrowable] =
      methodCallEx[SThrowable](self,
        this.getClass.getMethod("initCause", classOf[AnyRef]),
        List(cause.asInstanceOf[AnyRef]))
  }
  trait SThrowableImplCompanion
  // elem for concrete class
  class SThrowableImplElem(val iso: Iso[SThrowableImplData, SThrowableImpl])
    extends SThrowableElem[SThrowableImpl]
    with ConcreteElem[SThrowableImplData, SThrowableImpl] {
    override lazy val parent: Option[Elem[_]] = Some(sThrowableElement)
    override lazy val tyArgSubst: Map[String, TypeDesc] = {
      Map()
    }
    override lazy val eTo: Elem[_] = this
    override def convertSThrowable(x: Rep[SThrowable]) = // Converter is not generated by meta
!!!("Cannot convert from SThrowable to SThrowableImpl: missing fields List(wrappedValue)")
    override def getDefaultRep = SThrowableImpl(DefaultOfThrowable.value)
    override lazy val tag = {
      weakTypeTag[SThrowableImpl]
    }
  }

  // state representation type
  type SThrowableImplData = Throwable

  // 3) Iso for concrete class
  class SThrowableImplIso
    extends EntityIso[SThrowableImplData, SThrowableImpl] with Def[SThrowableImplIso] {
    override def from(p: Rep[SThrowableImpl]) =
      p.wrappedValue
    override def to(p: Rep[Throwable]) = {
      val wrappedValue = p
      SThrowableImpl(wrappedValue)
    }
    lazy val eFrom = element[Throwable]
    lazy val eTo = new SThrowableImplElem(self)
    lazy val selfType = new SThrowableImplIsoElem
    def productArity = 0
    def productElement(n: Int) = ???
  }
  case class SThrowableImplIsoElem() extends Elem[SThrowableImplIso] {
    def isEntityType = true
    def getDefaultRep = reifyObject(new SThrowableImplIso())
    lazy val tag = {
      weakTypeTag[SThrowableImplIso]
    }
  }
  // 4) constructor and deconstructor
  class SThrowableImplCompanionAbs extends CompanionDef[SThrowableImplCompanionAbs] {
    def selfType = SThrowableImplCompanionElem
    override def toString = "SThrowableImpl"

    @scalan.OverloadId("fromFields")
    def apply(wrappedValue: Rep[Throwable]): Rep[SThrowableImpl] =
      mkSThrowableImpl(wrappedValue)

    def unapply(p: Rep[SThrowable]) = unmkSThrowableImpl(p)
  }
  lazy val SThrowableImplRep: Rep[SThrowableImplCompanionAbs] = new SThrowableImplCompanionAbs
  lazy val SThrowableImpl: SThrowableImplCompanionAbs = proxySThrowableImplCompanion(SThrowableImplRep)
  implicit def proxySThrowableImplCompanion(p: Rep[SThrowableImplCompanionAbs]): SThrowableImplCompanionAbs = {
    proxyOps[SThrowableImplCompanionAbs](p)
  }

  implicit case object SThrowableImplCompanionElem extends CompanionElem[SThrowableImplCompanionAbs] {
    lazy val tag = weakTypeTag[SThrowableImplCompanionAbs]
    protected def getDefaultRep = SThrowableImpl
  }

  implicit def proxySThrowableImpl(p: Rep[SThrowableImpl]): SThrowableImpl =
    proxyOps[SThrowableImpl](p)

  implicit class ExtendedSThrowableImpl(p: Rep[SThrowableImpl]) {
    def toData: Rep[SThrowableImplData] = isoSThrowableImpl.from(p)
  }

  // 5) implicit resolution of Iso
  implicit def isoSThrowableImpl: Iso[SThrowableImplData, SThrowableImpl] =
    reifyObject(new SThrowableImplIso())

  // 6) smart constructor and deconstructor
  def mkSThrowableImpl(wrappedValue: Rep[Throwable]): Rep[SThrowableImpl]
  def unmkSThrowableImpl(p: Rep[SThrowable]): Option[(Rep[Throwable])]

  registerModule(Exceptions_Module)
}

// Std -----------------------------------
trait ExceptionsStd extends scalan.ScalanStd with ExceptionsDsl {
  self: ExceptionsDslStd =>
  lazy val SThrowable: Rep[SThrowableCompanionAbs] = new SThrowableCompanionAbs {
    override def apply(msg: Rep[String]): Rep[SThrowable] =
      SThrowableImpl(new Throwable(msg))
  }

  // override proxy if we deal with TypeWrapper
  //override def proxyThrowable(p: Rep[Throwable]): SThrowable =
  //  proxyOpsEx[Throwable, SThrowable, StdSThrowableImpl](p, bt => StdSThrowableImpl(bt))

  case class StdSThrowableImpl
      (override val wrappedValue: Rep[Throwable])
    extends SThrowableImpl(wrappedValue) {
    override def getMessage: Rep[String] =
      wrappedValue.getMessage

    override def initCause(cause: Rep[SThrowable]): Rep[SThrowable] =
      SThrowableImpl(wrappedValue.initCause(cause))
  }

  def mkSThrowableImpl
    (wrappedValue: Rep[Throwable]): Rep[SThrowableImpl] =
    new StdSThrowableImpl(wrappedValue)
  def unmkSThrowableImpl(p: Rep[SThrowable]) = p match {
    case p: SThrowableImpl @unchecked =>
      Some((p.wrappedValue))
    case _ => None
  }

  implicit def wrapThrowableToSThrowable(v: Throwable): SThrowable = SThrowableImpl(v)
}

// Exp -----------------------------------
trait ExceptionsExp extends scalan.ScalanExp with ExceptionsDsl {
  self: ExceptionsDslExp =>
  lazy val SThrowable: Rep[SThrowableCompanionAbs] = new SThrowableCompanionAbs {
    def apply(msg: Rep[String]): Rep[SThrowable] =
      newObjEx[SThrowable](msg)
  }

  case class ExpSThrowableImpl
      (override val wrappedValue: Rep[Throwable])
    extends SThrowableImpl(wrappedValue)

  object SThrowableImplMethods {
  }

  def mkSThrowableImpl
    (wrappedValue: Rep[Throwable]): Rep[SThrowableImpl] =
    new ExpSThrowableImpl(wrappedValue)
  def unmkSThrowableImpl(p: Rep[SThrowable]) = p.elem.asInstanceOf[Elem[_]] match {
    case _: SThrowableImplElem @unchecked =>
      Some((p.asRep[SThrowableImpl].wrappedValue))
    case _ =>
      None
  }

  object SThrowableMethods {
    object getMessage {
      def unapply(d: Def[_]): Option[Rep[SThrowable]] = d match {
        case MethodCall(receiver, method, _, _) if receiver.elem.isInstanceOf[SThrowableElem[_]] && method.getName == "getMessage" =>
          Some(receiver).asInstanceOf[Option[Rep[SThrowable]]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[SThrowable]] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }

    object initCause {
      def unapply(d: Def[_]): Option[(Rep[SThrowable], Rep[SThrowable])] = d match {
        case MethodCall(receiver, method, Seq(cause, _*), _) if receiver.elem.isInstanceOf[SThrowableElem[_]] && method.getName == "initCause" =>
          Some((receiver, cause)).asInstanceOf[Option[(Rep[SThrowable], Rep[SThrowable])]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[(Rep[SThrowable], Rep[SThrowable])] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }

  object SThrowableCompanionMethods {
    object apply {
      def unapply(d: Def[_]): Option[Rep[String]] = d match {
        case MethodCall(receiver, method, Seq(msg, _*), _) if receiver.elem == SThrowableCompanionElem && method.getName == "apply" =>
          Some(msg).asInstanceOf[Option[Rep[String]]]
        case _ => None
      }
      def unapply(exp: Exp[_]): Option[Rep[String]] = exp match {
        case Def(d) => unapply(d)
        case _ => None
      }
    }
  }
}

object Exceptions_Module extends scalan.ModuleInfo {
  val dump = "H4sIAAAAAAAAALVWy28bRRgf22nstU0fqTiUHppGLlBE7QgOPVgIRa6Litwk6kYUuVWr8e7EmTI7M+yM0zWHcsuh3FCvPVSAEFKFVPVfAAkhxAEhhARXTn2oyqE9gfrN7MNO1KXlgA+jeXz7PX6/3zfj2w/QHhWiV5WHGebNgGjcdO18SemG2+Wa6vFZ4Y8YOUXWa4/bR//c6pwpon19NLuB1SnF+siJJ91IZnNX+z3kYO4RpUWoNDrasxFanmCMeJoK3qJBMNJ4wEirR5Vu99DMQPjjj9E1VOih/Z7gXkg0cTsMK0VUsl8hJiOarR27Hq/ISQzeMlW0pqpYCzHVkD7E2B/bnyPSHXPBx4FGe5PUVqRJC2zKNJAi1GmIMrjbEH66nOEYNtBc7wrexC0IMWy5OqR8CF/WJPY+wkOyDCbGfAYSVoStr42lXZfARGkfADoTSGY9liKJEAIK3rJZNCcANTOAmgaghktCihn9BJvD1VBEYxT/CiWEIgku3nyOi9QD6XK/cf2id+GJWwuK5uPIpFK2Cc2CoyM5crBcAJA/nPtcbb9362QRVfuoStXSQOkQe3qa8wSuGuZcaJtzhiAOh0DXQh5dNsoS2OzShOOJQGIOnhIs60AUox7Vxtjs1RN6crAva0lS00IkC1m98zn1WuF0MGOr9w6dOHa/+2ERFXeGcMClC8oPU6caVd21jVBcNahbVM3gJADnh8qKfu3eQ//7RXSxmEGVeH4xdsDFHvX7b7Vfj79bRJW+FfNphod9QEt1GQlWwo7guo8qYpOE8Ul5EzMzeyZbZZ+s4xHTCYbTxZegeI3mc9tOEoNM2yq8kAJQi0W6LDhpnF5tPHZ/vHHbaDBE9fgk7sN/6Mm//9i7rq08NapfDbGUxP8As1Hc/Ps0KkEbJ6gkO04e9AkBZnjFGs/ZNXT/hC3Tk9Zg6tvngp7eLXe2tl5+9OXlg7YlKgOqAywbi/+hIVL9/o+CRzvBqhnL8xbXOLtZMxxJj/N17ExdF3PZmSG3GlPoioAcWNiml259pq2OC9HOG3NlcAVuqLb1c8j6aexKrt6NOmn1i9NHZph/sYQsmSCeg5NKOtOIxkRLMx7YTbwZj+3cBLVUu5FHrD7hAqslkhhpGt/lJwCBhRyduAkzIJVrT24uv/Hz3b/sZVI1HEMv8Oy9mRAa7VL3S5Po8IRMJavRjGE+S+J4XhLaNyInAYSLFbj9/jfO4W8HX1iWKuZtIh5TWVM/+70+i2XbPjiv/8uDA0aNbiDh3wNM3v7unV8+/enrr2w3PwWMIxzRdAgAAA=="
}
}

trait ExceptionsDsl extends impl.ExceptionsAbs
trait ExceptionsDslExp extends impl.ExceptionsExp
